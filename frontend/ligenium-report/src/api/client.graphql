subscription SubscribeOrders {
  order {
    id
    status
    assignee
    created_at
    updated_at
    notifications {
      id
      user_id
      read
    }
  }
}

subscription SubscribeOrder($id: Int!) {
  order_by_pk(id: $id) {
    id
    status
    assignee
    protocols(order_by: { created_at: desc }) {
      id
      user
      body
      created_at
    }
    incidents {
      incident {
        id
        assumption
        carrier {
          id
        }
      }
    }
    created_at
    updated_at
  }
}

subscription SubscribeCarriers {
  carrier {
    id
    status
    customer
    created_at
    updated_at
  }
}

subscription SubscribeCarrier($id: Int!) {
  carrier_by_pk(id: $id) {
    id
    status
    customer
    created_at
    updated_at
  }
}

subscription SubscribeCarrierData($carrierId: Int!, $type: String!) {
  carrier_data(where: { carrier: { id: { _eq: $carrierId } }, type: { _eq: $type } }, order_by: { created_at: asc }) {
    id
    created_at
    value
    dataset
  }
}

subscription SubscribeIncidents {
  incident {
    id
    carrier_id
    assumption
    status
    created_at
    updated_at
  }
}

mutation UpdateCarrier($id: Int!, $status: String!) {
  update_carrier(where: { id: { _eq: $id } }, _set: { status: $status }) {
    affected_rows
  }
}

mutation UpdateIncident($id: Int!, $status: String!) {
  update_incident(where: { id: { _eq: $id } }, _set: { status: $status }) {
    affected_rows
  }
}

mutation CreateOrder($incidents: [order_incidents_insert_input!]!) {
  insert_order_one(object: { incidents: { data: $incidents }, status: "error_detected", assignee: "Knauber" }) {
    id
  }
}

mutation CreateProtocol($order: Int!, $body: String!, $user: String!) {
  insert_protocol_one(object: { order_id: $order, body: $body, user: $user }) {
    id
  }
}

mutation UpdateOrder($id: Int!, $status: String!) {
  update_order(where: { id: { _eq: $id } }, _set: { status: $status }) {
    affected_rows
  }
}

mutation CreateNotification($order: Int!, $user: Int!) {
  insert_notification_one(object: { order_id: $order, user_id: $user, read: false }) {
    id
  }
}

mutation ReadNotifications($order: Int!, $user: Int!) {
  update_notification(where: { order_id: { _eq: $order }, user_id: { _eq: $user } }, _set: { read: true }) {
    affected_rows
  }
}

mutation CreateCarrierDataEntry($carrierId: Int!, $type: String!, $value: String!, $dataset: String!) {
  insert_carrier_data_one(object: { carrier_id: $carrierId, type: $type, value: $value, dataset: $dataset }) {
    id
  }
}

mutation CreateIncident($carrier_id: Int!, $assumption: String!) {
  insert_incident_one(object: {carrier_id: $carrier_id, assumption: $assumption, status: "error_detected"}) {
    id
    carrier_id
    assumption
  }
}

query IncidentExists($carrier_id: Int!) {
  incident(where: {carrier_id: {_eq: $carrier_id}, status: {_neq: "closed"}}) {
      carrier_id
  }
}

mutation CreateCarrier($carrier_id: Int!, $customer: String!, $status: String!) {
  insert_carrier_one(object: {id: $carrier_id, customer: $customer, status: $status}, on_conflict: { constraint: carrier_pkey, update_columns: [] }) {
      id
  }
}